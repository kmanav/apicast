env REDIS_HOST;
env REDIS_PORT;
env REDIS_URL;
env RESOLVER;
env BACKEND_ENDPOINT_OVERRIDE;
env OPENSSL_VERIFY;

{% if opentracing_tracer != empty %}
load_module /opt/app-root/src/nginx-modules/ngx_http_opentracing_module.so;
load_module /opt/app-root/src/nginx-modules/ngx_http_jaeger_module.so;
{% endif %}

daemon {{ daemon | default: 'off' }};
master_process {{ master_process | default: 'on' }};
worker_processes {{ worker_processes | default: 'auto' }};
pcre_jit on;
pid {{ pid | default: 'nginx.pid' }};

{% unless opentracing_tracer != empty %}
timer_resolution {{ timer_resolution | default: '100ms' }};
{% endunless %}

{% for file in "main.d/*.conf" | filesystem %}
  {% include file %}
{% endfor %}

error_log {{ error_log | default: '/dev/null' }} {{  log_level | default: 'emerg' }};

events {
  worker_connections  16192;
  multi_accept        on;
}

http {
  sendfile           on;
  tcp_nopush         on;
  tcp_nodelay        on;



  # Enabling the Lua code cache is strongly encouraged for production use
  # Disabling it should only be done for testing and development purposes
  lua_code_cache {{  lua_code_cache | default: 'on' }};
  lua_max_running_timers {{ lua_running_timers | default: 2048 }};
  lua_socket_pool_size {{ lua_socket_pool_size | default: 512 }};
  server_names_hash_bucket_size 128;

  log_format time '[$time_local] $host:$server_port $remote_addr:$remote_port "$request" $status $body_bytes_sent ($request_time) $post_action_impact';
  access_log off;

  lua_package_path "{{ lua_path | default: package.path }}";
  lua_package_cpath "{{ lua_cpath | default: package.cpath }}";

  ignore_invalid_headers off;

  {% if nameservers %}
    resolver {{ nameservers | join: " " }};
  {% endif %}

  {%- capture ENV -%}
    {
      {%- for env in env -%}
      {%- if env.name | starts_with: 'APICAST_', 'THREESCALE_' %}
      [ [[{{ env.name }}]] ] = [[{{ env.value }}]],
      {%- endif -%}
    {%- endfor %}
    }
  {%- endcapture -%}

  {% for file in "http.d/*.conf" | filesystem %}
    {% include file %}
  {% endfor %}

  {% if opentracing_tracer != empty %}
    {%- capture tracer_conf %}conf.d/opentracing/{{ opentracing_tracer }}.conf.liquid{%- endcapture -%}
    {% include tracer_conf %}
  {% endif %}

  server {
    listen {{ port.management | default: 8090 }};
    server_name {{ server_name.management | default: 'management _' }};

    {% if opentracing_tracer != empty %}
    opentracing_operation_name "apicast_management";
    opentracing_trace_locations off;
    {% endif %}

    {% include "conf.d/management.conf" %}
  }

  server {
    listen {{ port.backend | default: 8081 }};
    server_name backend;

    {% if opentracing_tracer != empty %}
    opentracing_operation_name "apicast_mockbackend";
    opentracing_trace_locations off;
    {% endif %}

    {% include "conf.d/backend.conf" %}
  }

  upstream echo {
    server 127.0.0.1:{{ port.echo | default: 8081 }};
    keepalive 1024;
  }

  server {
    listen {{ port.echo | default: 8081 }} default_server;
    server_name echo _;

    {% if opentracing_tracer != empty %}
    opentracing_operation_name "apicast_echo";
    opentracing_trace_locations off;
    {% endif %}

    {% include "conf.d/echo.conf" %}
  }

  server {

    access_log /dev/stdout time;

    listen {{ port.apicast | default: 8080 }};

    server_name _;

    {% if opentracing_tracer != empty %}
    opentracing_operation_name "apicast";
    opentracing_trace_locations on;
    {% endif %}

    {% include "http.d/ssl.conf" %}

    {% for file in "apicast.d/*.conf" | filesystem %}
      {% include file %}
    {% endfor %}
    {% include "conf.d/apicast.conf" %}
  }

  {% if port.metrics %}
    lua_shared_dict prometheus_metrics 16M;
    server {
      access_log off;
      listen {{ port.metrics }};
      server_name metrics prometheus _;

      location /metrics {
        content_by_lua_block { require('apicast.executor'):metrics() }
      }

      location /nginx_status {
        internal;
        stub_status;
      }
    }
  {% endif %}

  lua_shared_dict limiter 1m;

  {% for file in "sites.d/*.conf" | filesystem %}
    {% include file %}
  {% endfor %}

  {{ sites_d }}
}
